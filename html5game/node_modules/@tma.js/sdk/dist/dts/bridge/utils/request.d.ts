import { ExecuteWithOptions, If, IsNever } from '../../types/index.js';
import { MiniAppsEventListener, MiniAppsEventName, MiniAppsEventPayload } from '../events/types.js';
import { MiniAppsMethodName, MiniAppsMethodParams } from '../methods/types/index.js';

interface BasicOptions<Method extends MiniAppsMethodName, Event extends MiniAppsEventName> extends ExecuteWithOptions {
    /**
     * Mini Apps method name.
     */
    method: Method;
    /**
     * One or many tracked Mini Apps events.
     */
    event: Event | Event[];
    /**
     * Should return true in case, this event should be captured. If not specified,
     * request will be captured automatically.
     */
    capture?: If<IsNever<MiniAppsEventListener<Event>>, () => boolean, (payload: MiniAppsEventPayload<Event>) => boolean>;
}
/**
 * `request` method options.
 */
export type RequestOptions<Method extends MiniAppsMethodName, Event extends MiniAppsEventName> = BasicOptions<Method, Event> & If<IsNever<MiniAppsMethodParams<Method>>, {}, {
    /**
     * List of method parameters.
     */
    params: MiniAppsMethodParams<Method>;
}>;
/**
 * Calls specified Mini Apps method and captures one of the specified events. Returns promise
 * which will be resolved in case, specified event was captured.
 * @param options - method options.
 */
export declare function request<Method extends MiniAppsMethodName, Event extends MiniAppsEventName>(options: RequestOptions<Method, Event>): Promise<MiniAppsEventPayload<Event>>;
export {};
